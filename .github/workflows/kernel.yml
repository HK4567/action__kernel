name: kernel_build

on:
  workflow_dispatch:
    inputs:
      STRAT:
        description: 'STRAT'
        required: true
        default: 'strat'

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 最大化构建磁盘空间
        uses: easimon/maximize-build-space@v6
        with:
          root-reserve-mb: 1024
          swap-size-mb: 10240
          remove-dotnet: 'true'
          temp-reserve-mb: 1024
          remove-android: 'true'
          remove-haskell: 'true'

      - name: 查看
        uses: actions/checkout@v3

      - name: 清理文件/下载依赖
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d
          sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
          sudo apt -y autoremove --purge
          sudo apt -y autoclean
          sudo apt clean
          sudo apt update
          sudo apt -y install git python python2 python3 gcc-aarch64-linux-gnu clang bc bison flex libssl-dev ccache zip tree 

      - name: 下载内核
        run: |
          cd $GITHUB_WORKSPACE
          git clone https://github.com/HK4567/android_kernel_xiaomi_gauguin.git -b Marshmallow-q1 kernel

      - name: 下载编译器
        run: |
          git clone --depth=1 https://github.com/kdrag0n/proton-clang -b 20201017 clang
          
      - name: 编译内核
        run: |
          cd $GITHUB_WORKSPACE/kernel
          git submodule update --init --recursive
          export CLANG_PATH=$GITHUB_WORKSPACE/clang
          export PATH=${CLANG_PATH}/bin:${PATH}
          make O=out \
                ARCH=arm64 \
                CLANG_TRIPLE=aarch64-linux-gnu- \
                CROSS_COMPILE=$GITHUB_WORKSPACE/clang/bin/aarch64-linux-gnu- \
                CC=$GITHUB_WORKSPACE/clang/bin/clang \
                gauguin_user_defconfig
          echo "-------------------------------------------------------------------------------------------"
          echo "-------------------------------------------------------------------------------------------"
          make O=out \
                ARCH=arm64 \
                CLANG_TRIPLE=aarch64-linux-gnu- \
                CROSS_COMPILE=$GITHUB_WORKSPACE/clang/bin/aarch64-linux-gnu- \
                CC=$GITHUB_WORKSPACE/clang/bin/clang \
                -j4 2>&1 | tee out/kernel.log
 
      - name: Anykernel3
        run: |
          cd $GITHUB_WORKSPACE/kernel
          git clone https://github.com/osm0sis/AnyKernel3.git
          mv out/arch/arm64/boot/Image AnyKernel3/
          zip -r AnyKernel3.zip AnyKernel3/
          ls -al
          tree
      - name: 上传文件
        uses: ncipollo/release-action@v1.10.0
        with:
          artifacts: "${{ github.workspace }}/kernel/AnyKernel3.zip"
          name: " kernel "
          tag: " ${{ github.run_number }} "
          token: ${{ secrets.work }}
